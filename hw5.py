import pathlib
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from typing import Union, Tuple

INVALID_INPUT_MESSAGE = 'Invalid input: {data_fname}'


class QuestionnaireAnalysis:

    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        """Initiation of QuestionnaireAnalysis instance"""
        if not (isinstance(data_fname, pathlib.Path) or isinstance(data_fname, str)):  # invalid input type
            message = INVALID_INPUT_MESSAGE.format(data_fname=data_fname)
            raise ValueError(message)

        if isinstance(data_fname, str):
            data_fname = pathlib.Path(data_fname)

        if not data_fname.exists():  # missing file
            message = INVALID_INPUT_MESSAGE.format(data_fname=data_fname)
            raise ValueError(message)

        self.data_fname = data_fname
        self.data = None

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        self.data = pd.read_json(self.data_fname)

    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

        Returns
        -------
        hist : np.ndarray
            Number of people in a given bin
        bins : np.ndarray
            Bin edges
        """
        age_col = self.data['age']
        hist, bins = np.histogram(age_col, bins=10, range=(0, 100))
        plt.hist(age_col, bins)
        plt.show()
        return hist, bins

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

        Returns
        -------
        df : pd.DataFrame
            A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
            the (ordinal) index after a reset.
        """
        email_col = self.data['email']

        df = self.data.loc[email_col.str.get(-1) != '.']  # email does not end with a dot
        df = df.loc[email_col.str.get(0) != '.']  # email does not start with a dot
        df = df.loc[email_col.str.get(-1) != '@']  # email does not end with '@'
        df = df.loc[email_col.str.get(0) != '@']  # email does not start with '@'
        df = df.loc[email_col.str.find('@') != -1]  # email must contain '@'
        df = df.loc[email_col.str.find('.') != -1]  # email must contain '.'
        df = df.loc[email_col.str.find('@.') == -1]  # email must not contain '@.'
        df.index = (np.linspace(0, len(df)-1, len(df))).astype(int)  # reset indices
        return df

    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """
        Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.

        Returns
        -------
        df : pd.DataFrame
            The corrected DataFrame after insertion of the mean grade
        arr : np.ndarray
            Row indices of the students that their new grades were generated
        """

        question_cols = self.data[['q1', 'q2', 'q3', 'q4', 'q5']]
        arr = question_cols[question_cols.isnull().any(axis=1)].index  # row indices of students with at least
        # one unanswered question

        means = question_cols.mean(axis=1)
        df = self.data
        # replace nan values with average answer
        df['q1'].fillna(value=means, inplace=True)
        df['q2'].fillna(value=means, inplace=True)
        df['q3'].fillna(value=means, inplace=True)
        df['q4'].fillna(value=means, inplace=True)
        df['q5'].fillna(value=means, inplace=True)

        return df, arr

    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score is UInt8, and the floating point raw numbers should be
        rounded down.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
            A new DF with a new column - "score".
        """
        question_cols = self.data[['q1', 'q2', 'q3', 'q4', 'q5']]
        means = pd.Series(question_cols.mean(axis=1), dtype='uint8')
        means.loc[question_cols.count(axis=1) < (5-maximal_nans_per_sub)] = pd.NA  # too many nan values-> score=nan
        score = pd.Series(means, name='score', dtype=pd.UInt8Dtype())
        df = pd.concat([self.data, score], axis=1)  # add score column to the data

        return df

    def correlate_gender_age(self) -> pd.DataFrame:
        """Looks for a correlation between the gender of the subject, their age
            and the score for all five questions.

        Returns
        -------
        pd.DataFrame
            A DataFrame with a MultiIndex containing the gender and whether the subject is above
            40 years of age, and the average score in each of the five questions.
        """

        df = self.data[self.data['age'].isnull() == False]  # get rid of individuals without age value
        df['age'] = df['age'] > 40
        grouped = df.groupby(['gender', 'age'])  # group by gender & age>40

        return grouped[['q1', 'q2', 'q3', 'q4', 'q5']].mean()







